package exchange

import (
	"github.com/Beldur/kraken-go-api-client"
	"github.com/lightyeario/kelp/support/exchange/assets"
	"github.com/lightyeario/kelp/support/exchange/number"
)

// krakenExchange is the implementation for the Kraken Exchange
type krakenExchange struct {
	assetConverter *assets.AssetConverter
	api            *krakenapi.KrakenApi
}

// Values gives you the values of a map
// TODO 2 - move to autogenerated generic function
func Values(m map[assets.TradingPair]string) []string {
	values := []string{}
	for _, v := range m {
		values = append(values, v)
	}
	return values
}

// GetTickerPrice impl.
func (k krakenExchange) GetTickerPrice(pairs []assets.TradingPair) (map[assets.TradingPair]Ticker, error) {
	pairsMap, e := assets.TradingPairs2Strings(k.assetConverter, "", pairs)
	if e != nil {
		return nil, e
	}

	resp, e := k.api.Ticker(Values(pairsMap)...)
	if e != nil {
		return nil, e
	}

	priceResult := map[assets.TradingPair]Ticker{}
	for _, p := range pairs {
		pairTickerInfo := resp.GetPairTickerInfo(pairsMap[p])
		priceResult[p] = Ticker{
			AskPrice:  number.MustFromString(pairTickerInfo.Ask[0]),
			AskVolume: number.MustFromString(pairTickerInfo.Ask[1]),
			BidPrice:  number.MustFromString(pairTickerInfo.Bid[0]),
			BidVolume: number.MustFromString(pairTickerInfo.Bid[1]),
		}
	}

	return priceResult, nil
}

// KrakenExchange is the singleton instance of the kraken implementation
var KrakenExchange Exchange = krakenExchange{
	assetConverter: assets.KrakenAssetConverter,
	api:            krakenapi.New("", ""),
}
